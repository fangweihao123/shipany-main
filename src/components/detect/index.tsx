"use client";

import { useState, useCallback } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Upload, Image as ImageIcon, Loader2, CheckCircle, XCircle } from 'lucide-react';
import {
  DetectionState,
  FileUploadState,
  UnifiedDetectionResponse,
  DetectionProvider
} from '@/types/detect';
import {
  detectImage,
  validateFile,
  formatFileSize,
  getConfidenceColor,
  getConfidenceDescription,
  getDefaultProvider
} from '@/services/detect';
import { getImagePreview } from '@/lib/utils';
import { DetectionImageResult } from './detimgresult';
import { FileUpload } from '../blocks/upload';

export default function Detect() {
  const [fileState, setFileState] = useState<FileUploadState>({
    file: null,
    preview: null,
    isValid: false,
    error: null,
  });

  const [detectionState, setDetectionState] = useState<DetectionState>({
    isLoading: false,
    isUploading: false,
    isDetecting: false,
    isFinished: false,
    result: null,
    error: null,
    uploadProgress: 0,
    provider: getDefaultProvider(),
  });

  const handleFileSelect = useCallback(async (file: File) => {
    // Reset states
    setDetectionState(prev => ({
      ...prev,
      isLoading: false,
      isUploading: false,
      isDetecting: false,
      result: null,
      error: null,
      uploadProgress: 0,
    }));

    // Validate file
    const validation = validateFile(file);
    if (!validation.isValid) {
      setFileState({
        file: null,
        preview: null,
        isValid: false,
        error: validation.error || 'Invalid file',
      });
      return;
    }

    try {
      // Generate preview
      const preview = await getImagePreview(file);
      setFileState({
        file,
        preview,
        isValid: true,
        error: null,
      });
    } catch (error) {
      setFileState({
        file: null,
        preview: null,
        isValid: false,
        error: 'Failed to generate image preview',
      });
    }
  }, []);

  const handleDetection = useCallback(async () => {
    if (!fileState.file || !fileState.isValid) return;

    setDetectionState(prev => ({
      ...prev,
      isLoading: true,
      isDetecting: true,
      error: null,
    }));

    try {
      const result = await detectImage(fileState.file);
      setDetectionState(prev => ({
        ...prev,
        isLoading: false,
        isDetecting: false,
        result,
        error: null,
      }));
    } catch (error) {
      setDetectionState(prev => ({
        ...prev,
        isLoading: false,
        isDetecting: false,
        result: null,
        error: error instanceof Error ? error.message : 'Detection failed',
      }));
    }
  }, [fileState.file, fileState.isValid]);

  const handleReset = useCallback(() => {
    setFileState({
      file: null,
      preview: null,
      isValid: false,
      error: null,
    });
    setDetectionState(prev => ({
      ...prev,
      isLoading: false,
      isUploading: false,
      isDetecting: false,
      result: null,
      error: null,
      uploadProgress: 0,
    }));
  }, []);


  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-12 px-4">
      <div className="max-w-4xl mx-auto">
        {/* Header */}
        <div className="text-center mb-12">
          <h1 className="text-4xl font-bold text-gray-900 mb-4">
            AI Image Detector
          </h1>
          <p className="text-xl text-gray-600 max-w-2xl mx-auto">
            Upload an image to detect if it was generated by artificial intelligence. 
            Get instant results with confidence scores.
          </p>
        </div>


        {/* Main Content */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          {/* Upload Section */}
          <div className="space-y-6">
            <FileUpload
              onFileSelect={handleFileSelect}
              fileState={fileState}
              isLoading={detectionState.isLoading}
            />

            {/* File Info */}
            {fileState.file && fileState.isValid && (
              <Card>
                <CardContent className="pt-6">
                  <div className="flex items-center space-x-3">
                    <ImageIcon className="h-5 w-5 text-blue-600" />
                    <div className="flex-1 min-w-0">
                      <p className="text-sm font-medium text-gray-900 truncate">
                        {fileState.file.name}
                      </p>
                      <p className="text-sm text-gray-500">
                        {formatFileSize(fileState.file.size)}
                      </p>
                    </div>
                  </div>
                </CardContent>
              </Card>
            )}

            {/* Detection Button */}
            {fileState.isValid && (
              <Button
                onClick={handleDetection}
                disabled={detectionState.isLoading}
                className="w-full"
                size="lg"
              >
                {detectionState.isLoading ? (
                  <>
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    {detectionState.isDetecting ? 'Detecting...' : 'Processing...'}
                  </>
                ) : (
                  'Detect AI Generation'
                )}
              </Button>
            )}

            {/* Error Display */}
            {(fileState.error || detectionState.error) && (
              <Alert variant="destructive">
                <XCircle className="h-4 w-4" />
                <AlertDescription>
                  {fileState.error || detectionState.error}
                </AlertDescription>
              </Alert>
            )}
          </div>

          {/* Results Section */}
          <div className="space-y-6">
            <Card className="border-dashed">
              <CardContent className="pt-12 pb-12">
                <div className="text-center">
                  <ImageIcon className="mx-auto h-12 w-12 text-gray-400" />
                  <p className="mt-4 text-sm text-gray-500">
                    Detection results will appear here
                  </p>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>

        {/* Features */}
        <div className="mt-16 grid grid-cols-1 md:grid-cols-3 gap-6">
          <div className="text-center">
            <div className="bg-blue-100 w-12 h-12 rounded-full flex items-center justify-center mx-auto mb-4">
              <Upload className="h-6 w-6 text-blue-600" />
            </div>
            <h3 className="text-lg font-semibold text-gray-900 mb-2">
              Easy Upload
            </h3>
            <p className="text-gray-600">
              Drag & drop or click to upload your image files
            </p>
          </div>

          <div className="text-center">
            <div className="bg-green-100 w-12 h-12 rounded-full flex items-center justify-center mx-auto mb-4">
              <CheckCircle className="h-6 w-6 text-green-600" />
            </div>
            <h3 className="text-lg font-semibold text-gray-900 mb-2">
              Instant Results
            </h3>
            <p className="text-gray-600">
              Get detection results in seconds with confidence scores
            </p>
          </div>

          <div className="text-center">
            <div className="bg-purple-100 w-12 h-12 rounded-full flex items-center justify-center mx-auto mb-4">
              <ImageIcon className="h-6 w-6 text-purple-600" />
            </div>
            <h3 className="text-lg font-semibold text-gray-900 mb-2">
              Privacy First
            </h3>
            <p className="text-gray-600">
              Your images are processed securely and never stored
            </p>
          </div>
        </div>
      </div>
    </div>
  );
}